/* o container basicamente vai ser utilizado para limitar o conteúdo, para agrupar elementos e definir uma largura máxima para o conteúdo, evitando que ele se estenda demais na tela e prejudique a leitura */

/* utilizando a abordagem Mobile First:
    Aqui está uma explicação linha por linha:

    --max-width: 375px; →→→ Define uma variável CSS para armazenar o valor máximo da largura do .container.

    width: min(var(--max-width), 100% - var(--px-lg) * 2); →→→ Utiliza a função min() para definir a largura do .container como o menor valor entre --max-width (375px) e 100% - var(--px-lg) * 2 (a largura total da tela menos um espaço lateral, definido por outra variável --px-lg).

    Se var(--px-lg) não estiver definida, pode causar problemas na renderização. Caso essa variável represente um espaçamento lateral, o código garante que o .container tenha margens laterais proporcionais.

    margin-inline: auto; →→→ Distribui automaticamente a margem esquerda e direita, centralizando o .container dentro do elemento pai.
*/

.py-base {
  padding-block: var(--py-base);
}

.py-lg {
  padding-block: var(--py-lg);
}

.py-xl {
  padding-block: var(--py-xl);
}

.px-lg {
  padding-inline: var(--px-lg);
}

.container {
  --max-width: 375px; /* variavel  para o valor maximo de tamanho - mobile first */
  margin-inline: auto;
  width: min(var(--max-width), 100% - var(--px-lg) * 2);

  border: 1px solid red;
}

.desktop-only {
  display: none;
}

.even-columns {
  display: grid;
  gap: 1rem;
}

@media (width >= 80em) {
  .container {
    --max-width: 1280px;
  }

  .desktop-only {
    display: initial;
  }

  .even-columns {
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
  }
}
